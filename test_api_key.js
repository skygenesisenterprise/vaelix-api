require('dotenv').config();
const crypto = require('crypto');
const bcrypt = require('bcrypt');
const { Pool } = require('pg');

// Configuration de la base de donn√©es depuis les variables d'environnement
const pool = new Pool({
  host: process.env.DB_HOST,
  port: parseInt(process.env.DB_PORT || '5432'),
  database: process.env.DB_NAME,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
});

async function testApiKeySystem() {
  try {
    console.log('üß™ Test du syst√®me de cl√©s API...\n');

    // 1. V√©rifier la connexion √† la DB
    await pool.query('SELECT 1');
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie\n');

    // 2. G√©n√©rer une nouvelle cl√© API
    console.log('üîë G√©n√©ration d\'une nouvelle cl√© API...');
    const keySuffix = crypto.randomBytes(24).toString('hex');
    const key = `vb_${keySuffix}`;
    const secret = crypto.randomBytes(64).toString('hex');
    const hashedSecret = await bcrypt.hash(secret, 12);

    // Trouver un utilisateur existant
    const userResult = await pool.query('SELECT id FROM users LIMIT 1');
    if (userResult.rows.length === 0) {
      throw new Error('Aucun utilisateur trouv√© dans la base de donn√©es');
    }
    const userId = userResult.rows[0].id;

    // Ins√©rer la cl√© API
    const insertResult = await pool.query(
      `INSERT INTO api_keys (user_id, key, secret, type, name, description, created_at)
       VALUES ($1, $2, $3, $4, $5, $6, NOW())
       RETURNING id, key, type, name, description, created_at`,
      [userId, key, hashedSecret, 'client', 'test-key', 'Cl√© de test pour validation']
    );

    const apiKey = insertResult.rows[0];
    console.log('‚úÖ Cl√© API cr√©√©e avec succ√®s');
    console.log(`   ID: ${apiKey.id}`);
    console.log(`   Cl√©: ${apiKey.key}`);
    console.log(`   Type: ${apiKey.type}`);
    console.log(`   Nom: ${apiKey.name}\n`);

    // 3. Tester la validation de la cl√©
    console.log('üîç Test de validation de la cl√©...');

    // R√©cup√©rer la cl√© depuis la DB (simulation de ce que fait l'API)
    const dbResult = await pool.query(
      'SELECT * FROM api_keys WHERE key = $1',
      [key]
    );

    if (dbResult.rows.length === 0) {
      throw new Error('Cl√© non trouv√©e dans la base de donn√©es');
    }

    const storedKey = dbResult.rows[0];

    // V√©rifier le secret avec bcrypt
    const isValidSecret = await bcrypt.compare(secret, storedKey.secret);

    if (!isValidSecret) {
      throw new Error('√âchec de validation du secret');
    }

    console.log('‚úÖ Validation r√©ussie !');
    console.log(`   Cl√© trouv√©e: ${storedKey.key}`);
    console.log(`   Type: ${storedKey.type}`);
    console.log(`   Utilisateur: ${storedKey.user_id}`);
    console.log(`   Nom: ${storedKey.name}\n`);

    // 4. Tester avec un secret invalide
    console.log('üõ°Ô∏è  Test de s√©curit√© avec secret invalide...');
    const invalidSecret = crypto.randomBytes(64).toString('hex');
    const isInvalidValid = await bcrypt.compare(invalidSecret, storedKey.secret);

    if (isInvalidValid) {
      throw new Error('Le syst√®me de s√©curit√© a √©chou√©');
    }

    console.log('‚úÖ S√©curit√© valid√©e - secret invalide rejet√©\n');

    // 5. Lister toutes les cl√©s de l'utilisateur
    console.log('üìã Liste des cl√©s API de l\'utilisateur:');
    const userKeys = await pool.query(
      'SELECT id, key, type, name, description, created_at FROM api_keys WHERE user_id = $1 ORDER BY created_at DESC',
      [userId]
    );

    userKeys.rows.forEach((k, index) => {
      console.log(`   ${index + 1}. ${k.key} (${k.type}) - ${k.name || 'sans nom'}`);
    });

    console.log('\nüéâ Test complet r√©ussi ! Le syst√®me de cl√©s API fonctionne correctement.');
    console.log('\nüí° R√©capitulatif :');
    console.log('   ‚Ä¢ Cl√©s g√©n√©r√©es avec pr√©fixe vb_');
    console.log('   ‚Ä¢ Secrets hash√©s avec bcrypt');
    console.log('   ‚Ä¢ Validation s√©curis√©e');
    console.log('   ‚Ä¢ Multi-gestion par utilisateur');
    console.log('   ‚Ä¢ Support des noms/alias');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

testApiKeySystem();